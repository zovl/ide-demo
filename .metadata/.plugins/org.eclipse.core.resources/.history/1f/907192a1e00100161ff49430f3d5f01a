package com.fmscreenrecord.activity;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;

import android.annotation.SuppressLint;
import android.app.AlertDialog;
import android.app.TabActivity;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.graphics.Rect;
import android.graphics.drawable.Drawable;
import android.os.Bundle;
import android.os.Handler;
import android.text.Html;
import android.view.MotionEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.View.OnTouchListener;
import android.view.Window;
import android.view.animation.Animation;
import android.view.animation.AnimationUtils;
import android.widget.Button;
import android.widget.CompoundButton;
import android.widget.FrameLayout;
import android.widget.LinearLayout;
import android.widget.RadioButton;
import android.widget.RadioGroup;
import android.widget.TabHost;

import com.fmscreenrecord.app.ExApplication;
import com.fmscreenrecord.app.SRApplication;
import com.fmscreenrecord.fragment.LocalVideoFragment;
import com.fmscreenrecord.framework.AppManager;
import com.fmscreenrecord.frontcamera.CameraView;
import com.fmscreenrecord.notification.RecordVideoNotification;
import com.fmscreenrecord.record.Recorder44;
import com.fmscreenrecord.utils.DialogUtils;
import com.fmscreenrecord.utils.FileUtil;
import com.fmscreenrecord.utils.MinUtil;
import com.fmscreenrecord.utils.RUtils;
import com.fmscreenrecord.utils.RecordVideo;
import com.fmscreenrecord.utils.ResumableUpload;
import com.fmscreenrecord.utils.RootUtils;
import com.screeclibinvoke.R;
import com.umeng.message.PushAgent;

/**
 * 加载页面的activity
 * 
 * @author lin Creat:2015-01
 */
@SuppressLint("ResourceAsColor")
@SuppressWarnings("deprecation")
public class FMMainActivity extends TabActivity implements android.widget.CompoundButton.OnCheckedChangeListener,
		OnClickListener {
	private static TabHost tabHost;
	// static Map< String, TabHost> tabMap = new Ha<String, TabHost>();
	RadioButton radioButtonHome;

	static FrameLayout buttomLayout;

	static RadioGroup radioGroup;
	static RadioButton radioButtonVideo;
	static RadioButton radioButtonSetting;
	static RadioButton radioButtonFind;
	private static Context activity;
	static Context mContext;

	int main_tab_home = 0, main_tab_video = 1, main_tab_find = 2, main_tab_setting = 3;

	private static String home = "HOME";
	private static String video = "VIDEO";
	private static String setting = "SETTING";
	private static String login = "LOGIN";
	private static String hotvideo = "HOTVIDEO";

	private static String topthree = "TOPTHREE";

	private static LinearLayout delLayout;
	/** 删除按钮 */
	private static Button btnDel;
	/** 全选按钮 */
	public static Button btnSelAll;
	/** 保存到SD卡按钮 */
	public static Button moveToSDcard;
	/** 透明遮盖层 */
	static LinearLayout hintLinearlayout;
	static Intent layout2intent = new Intent();

	static Intent layout3intent = new Intent();
	static Intent layout4intent = new Intent();
	static Intent layout5intent = new Intent();
	static int height;

	@Override
	public void onCreate(Bundle savedInstanceState) {
		super.onCreate(savedInstanceState);

		this.requestWindowFeature(Window.FEATURE_NO_TITLE);
		ExApplication.getInstance().initSystemBar(this);
		setContentView(R.layout.fm_main);
		AppManager.getInstance().addActivity(this);
		activity = this;
		mContext = getApplicationContext();
		int SDKVesion = ExApplication.getAndroidSDKVersion();
		ExApplication.getInstance().setFloatView(true);
		if (SDKVesion < 21 && SDKVesion >= 19) {
			if (RootUtils.appRoot1()) {
				// 把录制核心拷贝到包名目录下(针对4.4)
				cpRecrodCore();
			}

		}
		// 查找页面控件
		findviews();
		MinUtil.mylog("--------onCreate--------------");
		ResumableUpload.printCallbacks();
		tabHost = this.getTabHost();

		Intent layout1intent = new Intent();
		layout1intent.setClass(this, MainActivity.class);
		TabHost.TabSpec layout1spec = tabHost.newTabSpec(home);
		layout1spec.setIndicator(home);
		layout1spec.setContent(layout1intent);
		tabHost.addTab(layout1spec);
		if (layout2intent == null)
			layout2intent = new Intent();
		if (layout3intent == null)
			layout3intent = new Intent();
		if (layout4intent == null)
			layout4intent = new Intent();
		if (layout5intent == null)
			layout5intent = new Intent();

		layout2intent.setClass(this, VideoManager.class);
		layout3intent.setClass(this, WonderfulVideo.class);
		layout4intent.setClass(this, SettingActivity.class);
		layout5intent.setClass(this, TopThreeVideo.class);

		TabHost.TabSpec layout2spec = tabHost.newTabSpec(video);
		layout2spec.setIndicator(video);
		layout2spec.setContent(layout2intent);
		tabHost.addTab(layout2spec);

		TabHost.TabSpec layout3spec = tabHost.newTabSpec(hotvideo);
		layout3spec.setIndicator(hotvideo);
		layout3spec.setContent(layout3intent);
		tabHost.addTab(layout3spec);

		TabHost.TabSpec layout4spec = tabHost.newTabSpec(setting);
		layout4spec.setIndicator(setting);
		layout4spec.setContent(layout4intent);
		tabHost.addTab(layout4spec);
		TabHost.TabSpec layout5spec = tabHost.newTabSpec(topthree);
		layout5spec.setIndicator(hotvideo);
		layout5spec.setContent(layout5intent);
		tabHost.addTab(layout5spec);

		// 判断是否打开欢迎引导界面
		isOpeanWelComeActivity();

		// 如果处于非录屏时间
		if (!RecordVideo.isRecordering) {
			// 关闭前置摄像头
			if (ExApplication.floatCameraClose == false) {
				CameraView.closeFloatView();
			}

		}

		// 友盟推送
		PushAgent mPushAgent = PushAgent.getInstance(mContext);
		mPushAgent.enable();
		PushAgent.getInstance(mContext).onAppStart();
		// 获取设备的Device Token
		// String device_token = UmengRegistrar.getRegistrationId(mContext);
		// MinUtil.mylog("device_token:"+device_token);
	}

	@Override
	public void onWindowFocusChanged(boolean hasFocus) {
		super.onWindowFocusChanged(hasFocus);
		height = buttomLayout.getHeight();
		Rect frame = new Rect();
		getWindow().getDecorView().getWindowVisibleDisplayFrame(frame);
		ExApplication.statusBarHeight = frame.top;
	}

	protected void onResume() {

		super.onResume();
		if (RecordVideo.isRecordering == false) {

			RecordVideoNotification.getInstance().clearNotify(200);
			RecordVideoNotification.getInstance().unregisterEventBus();
			RecordVideoNotification.getInstance().unregisterReceiver(getApplicationContext());

			if (ExApplication.isgotovideomange == true) {
				ExApplication.isgotovideomange = false;
				// 刷新本地视频
				LocalVideoFragment.handler.sendEmptyMessage(4);
				// 跳转到视频管理页面
				handler.sendEmptyMessage(4);

			}
		}

		ExApplication.getInstance().setFloatView(true);
	}

	/**
	 * 查找控件
	 */
	@SuppressLint("NewApi")
	private void findviews() {
		buttomLayout = (FrameLayout) this.findViewById(R.id.buttom_layout);
		radioGroup = (RadioGroup) this.findViewById(R.id.main_tab_group);

		radioButtonHome = (RadioButton) findViewById(R.id.main_tab_home);
		radioButtonVideo = (RadioButton) findViewById(R.id.main_tab_video);
		radioButtonSetting = (RadioButton) findViewById(R.id.main_tab_setting);
		radioButtonFind = (RadioButton) findViewById(R.id.main_tab_find);
		int size = ExApplication.dip2px(20);
		Drawable[] home = radioButtonHome.getCompoundDrawables();
		home[1].setBounds(1, 1, size, size);
		radioButtonHome.setCompoundDrawables(null, home[1], null, null);

		Drawable[] video = radioButtonVideo.getCompoundDrawables();
		video[1].setBounds(1, 1, size, size);
		radioButtonVideo.setCompoundDrawables(null, video[1], null, null);

		Drawable[] setting = radioButtonSetting.getCompoundDrawables();
		setting[1].setBounds(1, 1, size, size);
		radioButtonSetting.setCompoundDrawables(null, setting[1], null, null);

		Drawable[] find = radioButtonFind.getCompoundDrawables();
		find[1].setBounds(1, 1, size, size);
		radioButtonFind.setCompoundDrawables(null, find[1], null, null);

		delLayout = (LinearLayout) findViewById(R.id.main_tab_del);
		btnDel = (Button) findViewById(R.id.main_btn_del);

		btnSelAll = (Button) findViewById(R.id.main_btn_sel_all);

		moveToSDcard = (Button) findViewById(R.id.main_btn_save_to_sdcard);
		hintLinearlayout = (LinearLayout) findViewById(R.id.fm_main_hint_linearlayout2);

		radioButtonHome.setOnCheckedChangeListener(this);
		radioButtonVideo.setOnCheckedChangeListener(this);
		radioButtonSetting.setOnCheckedChangeListener(this);
		radioButtonFind.setOnCheckedChangeListener(this);
		btnDel.setOnClickListener(this);
		moveToSDcard.setOnClickListener(this);
		btnSelAll.setOnClickListener(this);
		hintLinearlayout.setOnTouchListener(new OnTouchListener() {

			@Override
			public boolean onTouch(View v, MotionEvent event) {
				// 将点击事件进行吞没，不传递到下一层
				return true;
			}
		});

	}

	/** 判断是否打开欢迎引导页 */
	private void isOpeanWelComeActivity() {

		if (ExApplication.estimateVersion()) {

			Intent WelIntent = new Intent(FMMainActivity.this, WelcomeActivity.class);
			startActivity(WelIntent);
			finish();

		}
	}

	public static Handler handler = new Handler() {
		public void handleMessage(android.os.Message msg) {
			switch (msg.what) {
			case 1: // 登录成功，跳转到personal，来自LoginActivity
			{
				// 获得第三方登陆方式(QQ、微博、微信、短信)
				String channel = (String) msg.obj;
				if (activity != null) {
					MinUtil.upUmenEventValue(activity, channel, "fmLoginSuccess");
					// 跳转到个人中心
					Intent intent = new Intent(activity, PersonalActivity.class);
					activity.startActivity(intent);
				}

			}
				break;
			case 2: // 注销，跳转到LoginActivity
			{
				if (activity != null) {
					Intent intent = new Intent(activity, LoginActivity.class);
					activity.startActivity(intent);

					VideoManager.handler.sendEmptyMessage(15);
					// 清空云端视频数据信息
					VideoManager.handlerViewChange.sendEmptyMessage(19);
				}
			}
				break;
			case 3: {
				tabHost.setCurrentTabByTag(login);
				VideoManager.handlerViewChange.sendEmptyMessage(1);

				radioButtonFind.performClick();
			}
				break;
			case 4:// 跳转到视屏页

				// 模拟点击视频页按钮
				radioButtonVideo.performClick();
				break;
			case 5: // 显示删除按钮
			{
				// TODO
				delLayout.setVisibility(View.VISIBLE);
				radioGroup.setVisibility(View.GONE);
				if (VideoManager.IN_WHITCH_PAGE == 1) {
					btnDel.setText(RUtils.getRString("fm_clear_record"));// 清除記錄
				} else {
					btnDel.setText(RUtils.getRString("delete"));// 刪除
				}
				// 如果是云端视频管理页，隐藏“保存到相册按钮”
				// if (VideoManager.IN_WHITCH_PAGE == 1) {
				// btnSaveToPhoto.setVisibility(View.GONE);
				// } else {
				// btnSaveToPhoto.setVisibility(View.VISIBLE);
				// }
			}
				break;
			case 6: // 隐藏删除编辑栏

			{
				radioGroup.setVisibility(View.VISIBLE);
				delLayout.setVisibility(View.GONE);

				btnSelAll.setText(RUtils.getRString("fm_home_page_select_all"));
			}
				break;
			case 7: {
				if (hintLinearlayout.getVisibility() == View.VISIBLE) {
					// 隐藏遮罩层
					Animation animation = AnimationUtils.loadAnimation(mContext, R.anim.zoom_exit);
					hintLinearlayout.startAnimation(animation);
					hintLinearlayout.setVisibility(View.GONE);
				} else {

					hintLinearlayout.setVisibility(View.VISIBLE);
				}

			}
				break;
			// 主页菜单栏的显示与关闭
			case 8: {
				buttomLayout.setVisibility(View.GONE);
			}
				break;
			case 9: {
				buttomLayout.setVisibility(View.VISIBLE);
			}
				break;

			case 13:
				// 跳到精彩视频
				tabHost.setCurrentTabByTag(hotvideo);
				// 模拟点击按钮
				radioButtonFind.performClick();
				break;
			case 14:

				// 跳到热门分类下的三个子分类
				tabHost.setCurrentTabByTag(topthree);
				// 模拟点击按钮
				radioButtonFind.performClick();
				break;
			}

		};
	};

	@Override
	public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {
		TabActivity tabActivity = (TabActivity) AppManager.getInstance().getActivity(FMMainActivity.class);
		if (tabHost == null) {
			tabHost = tabActivity.getTabHost();
		}
		if (buttonView == radioButtonHome) {
			if (isChecked == true) {

				tabHost.setCurrentTabByTag(home);

			}
		} else if (buttonView == radioButtonVideo) {
			if (isChecked == true) {

				tabHost.setCurrentTabByTag(video);

			}
		} else if (buttonView == radioButtonSetting) {
			if (isChecked == true) {

				tabHost.setCurrentTabByTag(setting);

			}
		} else if (buttonView == radioButtonFind) {
			if (isChecked == true) {

				tabHost.setCurrentTabByTag(hotvideo);

			}

		}

	}

	@Override
	protected void onPause() {
		super.onPause();

	}

	@Override
	public void onClick(View v) {

		if (v == btnSelAll) {
			if (btnSelAll.getText().equals(RUtils.getRString("fm_home_page_select_all"))) {
				VideoManager.handlerViewChange.sendEmptyMessage(16);
				// 取消全选
				btnSelAll.setText(RUtils.getRString("fm_home_page_select_all_cancle"));
			} else {// 全選
				VideoManager.handlerViewChange.sendEmptyMessage(17);
				btnSelAll.setText(RUtils.getRString("fm_home_page_select_all"));
			}
		} else if (v == btnDel) {
			if (VideoManager.IN_WHITCH_PAGE == 0) {
				if (VideoManager.localVideoListCheckToDel.size() > 0) {
					dialogDelVideo(VideoManager.localVideoListCheckToDel.size());
				} else {
					MinUtil.showToast(getApplicationContext(), RUtils.getRString("select_video_of_delect"));
				}
			} else if (VideoManager.IN_WHITCH_PAGE == 1) {
				if (VideoManager.serverVideoListCheckToDel.size() > 0) {
					dialogDelVideo(VideoManager.serverVideoListCheckToDel.size());
				} else {
					MinUtil.showToast(getApplicationContext(), RUtils.getRString("select_video_of_delect"));

				}
			}

			else if (VideoManager.IN_WHITCH_PAGE == 2) {
				if (VideoManager.imageListCheckToDel.size() > 0) {
					dialogDelImage();
				} else {
					MinUtil.showToast(getApplicationContext(), RUtils.getRString("select_picture_of_delect"));
				}
			}

		} else if (v == moveToSDcard) {// 保存视频或图片到外置SD卡

			if (VideoManager.IN_WHITCH_PAGE == 0) {
				// 检查外置SD卡是否存在
				if (FileUtil.getSDDEfault(getApplicationContext()) != null) {

					if (VideoManager.localVideoListCheckToDel.size() > 0) {

						VideoManager.handlerViewChange.sendEmptyMessage(9);
					} else {
						MinUtil.showToast(getApplicationContext(), RUtils.getRString("select_video_of_save_sdcard"));

					}

				} else {// 找不到SD卡
					MinUtil.showToast(getApplicationContext(), RUtils.getRString("cant_find_sdcard"));

				}
			}

			else if (VideoManager.IN_WHITCH_PAGE == 2) {
				// 检查外置SD卡是否存在
				if (FileUtil.getPictureFile(getApplicationContext()) != null) {

					if (VideoManager.imageListCheckToDel.size() > 0) {

						VideoManager.handlerViewChange.sendEmptyMessage(9);
					} else {
						MinUtil.showToast(getApplicationContext(), RUtils.getRString("select_picture_of_save_sdcard"));
					}

				} else {
					MinUtil.showToast(getApplicationContext(), RUtils.getRString("cant_find_sdcard"));

				}
			}

		}
	}

	/**
	 * 删除视频对话框
	 * 
	 * @param size
	 */
	protected void dialogDelVideo(int size) {

		AlertDialog.Builder builder = new AlertDialog.Builder(activity);
		builder.setTitle(Html.fromHtml(RUtils.getRString("fm_sure_delect") + "<font color=\"#15b4eb\"> " + size
				+ " </font>" + RUtils.getRString(R.string.fm_video_nums)));
		builder.setPositiveButton(
				Html.fromHtml("<font color=\"#15b4eb\"> " + RUtils.getRString("fm_sure") + " </font>"),
				new DialogInterface.OnClickListener() {
					@Override
					public void onClick(DialogInterface dialog, int which) {

						delLayout.setVisibility(View.INVISIBLE);
						VideoManager.handlerViewChange.sendEmptyMessage(6);
						handler.sendEmptyMessage(6);

					}
				});
		builder.setNegativeButton(RUtils.getRString("fm_screenshot_cancel"), new DialogInterface.OnClickListener() {
			@Override
			public void onClick(DialogInterface dialog, int which) {
			}
		});
		builder.create().show();

	}

	/**
	 * 删除图片对话框
	 */
	protected void dialogDelImage() {

		AlertDialog.Builder builder = new AlertDialog.Builder(activity);
		builder.setTitle(Html.fromHtml(RUtils.getRString("fm_sure_delect") + "<font color=\"#15b4eb\"> "
				+ VideoManager.imageListCheckToDel.size() + " </font> " + RUtils.getRString("fm_picture_nums")));
		builder.setPositiveButton(
				Html.fromHtml("<font color=\"#15b4eb\"> " + RUtils.getRString("fm_sure") + " </font>"),
				new DialogInterface.OnClickListener() {
					@Override
					public void onClick(DialogInterface dialog, int which) {
						delLayout.setVisibility(View.INVISIBLE);
						VideoManager.handlerViewChange.sendEmptyMessage(6);
						handler.sendEmptyMessage(6);
					}
				});
		builder.setNegativeButton(RUtils.getRString("fm_screenshot_cancel"), new DialogInterface.OnClickListener() {
			@Override
			public void onClick(DialogInterface dialog, int which) {
			}
		});
		builder.create().show();

	}

	int copytimes = 0;

	/**
	 * 将文件拷贝至data下的应用文件夹内
	 */
	@SuppressLint("SdCardPath")
	void cpRecrodCore() {
		// 获取/data/data/com.screeclibinvoke/files文件路径
		String packageNameFiles = getFilesDir().getPath();
		File fileNewCore = new File("/data/data/com.screeclibinvoke/files" + "/fmNewCore");
		if (!fileNewCore.exists()) {
			MinUtil.mylog("拷新核心");
			copyFile("fmNewCore", R.raw.screenrecord1111);
			Recorder44.StartRecord("chmod 777 " + packageNameFiles + "/fmNewCore");

		}

		File filebusybox = new File(packageNameFiles + "/busybox");
		if (!filebusybox.exists()) {
			MinUtil.mylog("拷busybox");
			copyFile("busybox", R.raw.busybox);
			Recorder44.StartRecord("chmod 777 " + packageNameFiles + "/busybox");

		}
		File fileOldCore = new File(packageNameFiles + "/fmOldCore");
		if (!fileOldCore.exists()) {
			MinUtil.mylog("拷旧核心");
			copyFile("fmOldCore", R.raw.screenrecord10272);
			Recorder44.StartRecord("chmod 777 " + packageNameFiles + "/fmOldCore");

		}

	}

	/**
	 * 将文件拷贝至data下的应用文件夹内
	 * 
	 * @param FileName
	 * @param Raw
	 */
	@SuppressLint("SdCardPath")
	private void copyFile(String FileName, int Raw) {
		InputStream is = null;
		FileOutputStream fos = null;
		try {
			String packageNameFiles = getFilesDir().getPath();
			File file = new File(packageNameFiles + "/" + FileName);
			is = SRApplication.getContext().getResources().openRawResource(Raw);
			fos = new FileOutputStream(file);
		} catch (FileNotFoundException e1) {

			e1.printStackTrace();
			return;

		}
		byte[] buffer = new byte[1024];
		int count = 0;

		try {
			while ((count = is.read(buffer)) > 0) {

				fos.write(buffer, 0, count);
			}
			fos.close();
			is.close();
		} catch (IOException e) {

			e.printStackTrace();

		}
	}

	@Override
	protected void onDestroy() {
		super.onDestroy();
		initialize();
		AppManager.getInstance().removeActivity(this);
		DialogUtils.dismissLoadingDialog();
		MinUtil.mylog("--------onDestroy--------------");
		ResumableUpload.printCallbacks();
	}

	// TODO
	void initialize() {
		try {
			if (activity != null)
				activity = null;
			if (mContext != null)
				mContext = null;
			if (radioGroup != null)
				radioGroup = null;
			if (radioButtonVideo != null)
				radioButtonVideo = null;
			if (radioButtonSetting != null)
				radioButtonSetting = null;
			if (radioButtonFind != null)
				radioButtonFind = null;
			if (delLayout != null)
				delLayout = null;
			if (btnDel != null)
				btnDel = null;
			if (btnSelAll != null)
				btnSelAll = null;
			if (moveToSDcard != null)
				moveToSDcard = null;
			if (hintLinearlayout != null)
				hintLinearlayout = null;
			if (layout2intent != null)
				layout2intent = null;
			if (layout3intent != null)
				layout3intent = null;
			if (layout4intent != null)
				layout4intent = null;
			if (layout5intent != null)
				layout5intent = null;
			if (tabHost != null)
				tabHost = null;
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
