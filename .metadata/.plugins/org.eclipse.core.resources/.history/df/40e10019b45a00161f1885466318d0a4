package com.fmscreenrecord.activity;

/**
 * 设置页
 * @author lin
 * Creat:2014-12
 * Refactor:2014-12
 */

import java.io.File;
import java.util.LinkedList;
import java.util.List;

import android.annotation.SuppressLint;
import android.app.Activity;
import android.app.AlarmManager;
import android.app.AlertDialog;
import android.app.Dialog;
import android.app.PendingIntent;
import android.content.ActivityNotFoundException;
import android.content.BroadcastReceiver;
import android.content.ComponentName;
import android.content.Context;
import android.content.DialogInterface;
import android.content.Intent;
import android.content.IntentFilter;
import android.content.SharedPreferences;
import android.content.pm.ActivityInfo;
import android.content.pm.PackageManager;
import android.content.pm.ResolveInfo;
import android.os.AsyncTask;
import android.os.Build;
import android.os.Bundle;
import android.preference.PreferenceManager;
import android.view.KeyEvent;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.Window;
import android.widget.CheckBox;
import android.widget.CompoundButton;
import android.widget.CompoundButton.OnCheckedChangeListener;
import android.widget.ImageView;
import android.widget.LinearLayout;
import android.widget.TextView;
import android.widget.Toast;

import com.fmscreenrecord.app.ExApplication;
import com.fmscreenrecord.config.XmlFileWriter;
import com.fmscreenrecord.floatview.FloatContentView;
import com.fmscreenrecord.record.RecordAction;
import com.fmscreenrecord.service.ScreenRECService;
import com.fmscreenrecord.update.Update;
import com.fmscreenrecord.update.UpdateTask;
import com.fmscreenrecord.utils.MResource;
import com.fmscreenrecord.utils.MinUtil;
import com.fmscreenrecord.utils.OpenFloatView;
import com.fmscreenrecord.utils.RUtils;
import com.fmscreenrecord.utils.RecordVideo;
import com.fmscreenrecord.utils.SharedPreferencesUtils;
import com.fmscreenrecord.utils.StoreDirUtil;
import com.fmscreenrecord.utils.ViewUtils;
import com.screeclibinvokehw.R;
import com.umeng.analytics.MobclickAgent;

public class VideoApplicationActivity extends Activity implements OnClickListener,
		OnCheckedChangeListener {
	public static VideoApplicationActivity last2;
	long onPreferenceTreeClickTime = 0;
	private HomeKeyEventBroadCastReceiver receiver;

	private SharedPreferences sharedPreferences;
	boolean isDeviceRooted = true;
	boolean isSupportDevice = true;
	boolean isAuthed = true;
	String storeDir;
	boolean isFirstResume = true;
	volatile static boolean isShowNotify = false;

	private List<Activity> activityList = new LinkedList<Activity>();
	private static VideoApplicationActivity instance;
	private Context mContext;
	private Update update;
	// 声音录制checkbox
	private CheckBox recordSound;
	// 摇晃录屏
	private CheckBox yaHangJiePing;
	// 显示悬浮框
	private CheckBox showFloatView;
	// 显示触摸位置
	private CheckBox showTouch;
	// 前置摄像头
	private CheckBox frontCamera;
	// 是否显示游戏列表
	private CheckBox showGameList;

	// 录屏后跳转到视频管理
	private CheckBox gotoVideoManage;
	// 画质选择
	private LinearLayout qualityOfVideo;
	// 帮助与教程
	private LinearLayout help;
	/** 语言选择 */
	private LinearLayout chooseLanguage;
	// 储存路径
	// private LinearLayout storeDirLinear;
	// 显示当前清晰度
	private TextView qualityTextview;
	// 检查更新
	private LinearLayout checkUpdate;
	// 显示新版本的红点
	private ImageView newVersion;
	// 关于我们
	private LinearLayout aboutus;
	// 开启悬浮窗
	private LinearLayout openfloat;
	View openflaotView; 
	// 邀请好友
	private LinearLayout inviteFriend;

	// XML配置文件
	private XmlFileWriter xmlFileWriter;
	public static AlarmManager alarmManager;

	// 手机操作系统
	String manufacturer;

	// 发现新版本提示linearlayout
	private LinearLayout VersionLinear;
	// 接受消息推送勾选框
	private CheckBox PushNotification;

	public static PendingIntent sender;

	private OpenFloatView openFloatView;

	// 检查服务器最新版本
	// UpdateTask updateTask;

	// 录屏大师
	private String SRUrl = "http://lp.ifeimo.com/";
	private String iconUrl = "http://apps.ifeimo.com/Public/Uploads/Game/Flag/icon.png";

	// 构造函数
	public VideoApplicationActivity() {
		// Log.i(TAG, "Instantiated new " + this.getClass());
	}

	// 单例模式中获取唯一的MyApplication实例
	public static VideoApplicationActivity getInstance() {
		if (null == instance) {
			instance = new VideoApplicationActivity();
		}
		return instance;
	}

	// 添加Activity到容器中
	public void addActivity(Activity activity) {
		activityList.add(activity);
	}

	// 遍历所有Activity并finish
	public void exit() {
		for (Activity activity : activityList) {
			activity.finish();
		}
		System.exit(0);
	}

	public void onCreate(Bundle bundle) {
		requestWindowFeature(Window.FEATURE_NO_TITLE);
		super.onCreate(bundle);

		last2 = VideoApplicationActivity.this;
		mContext = VideoApplicationActivity.this;

		setContentView(R.layout.fm_preference_list);

		sharedPreferences = PreferenceManager
				.getDefaultSharedPreferences(getApplicationContext());
		xmlFileWriter = new XmlFileWriter();

		openFloatView = new OpenFloatView();

		// 查找页面控件
		findViews();
		// 注册监听
		setOnClick();
		// 初始化页面数据
		initData();

		startService();
		receiver = new HomeKeyEventBroadCastReceiver();
		registerReceiver(receiver, new IntentFilter(
				Intent.ACTION_CLOSE_SYSTEM_DIALOGS));

		File store = StoreDirUtil.getDefault(this);
		if (store != null) {
			storeDir = store.getAbsolutePath();
		}

		showScreenshotNotification();
	}

	private void findViews() {

		// 录制声音
		recordSound = (CheckBox) findViewById(R.id.fm_record_sound_checkbox);
		// 摇晃录屏
		yaHangJiePing = (CheckBox) findViewById(R.id.fm_yahangjieping_checkbox);
		// 显示悬浮框
		showFloatView = (CheckBox) findViewById(R.id.fm_show_float_view_checkbox);
		// 显示触摸位置
		showTouch = (CheckBox) findViewById(R.id.fm_showptouch_checkbox);
		// 显示触摸位置
		frontCamera = (CheckBox) findViewById(R.id.fm_show_front_camera);
		// 视频清晰度
		qualityOfVideo = (LinearLayout) findViewById(R.id.fm_quality_of_video_linearlayout);
		qualityTextview = (TextView) findViewById(R.id.fm_quality_of_video_textview);
		// 显示游戏列表
		showGameList = (CheckBox) findViewById(R.id.fm_gamelistnotify_checkbox);

		// 开启悬浮窗
		openfloat = (LinearLayout) findViewById(R.id.fm_open_floatview);
		openflaotView = findViewById(R.id.fm_open_floatview_view);
		help = (LinearLayout) findViewById(R.id.fm_help);
		// 录屏后跳转到视频管理
		gotoVideoManage = (CheckBox) findViewById(R.id.fm_recordgoto_videomanage);
		// 迁移存储路径
		// storeDirLinear = (LinearLayout) findViewById(
		// R.id.fm_image_store_dir_linearlayout);
		// 检测是否有最新版本
		checkUpdate = (LinearLayout) findViewById(R.id.fm_checkviupdate_linear);
		// 显示当前已是最新版本linearlayout
		VersionLinear = (LinearLayout) findViewById(R.id.fm_sdversion_linearlayout);
		// 显示有新版本的红点
		newVersion = (ImageView) findViewById(R.id.fm_newversion_linearlayout);

		aboutus = (LinearLayout) findViewById(R.id.fm_aboutus_linear);
		inviteFriend = (LinearLayout) findViewById(R.id.fm_invite_friend);

		// 获取消息推送勾选框
		PushNotification = (CheckBox) findViewById(R.id.checkbox_Push_Notification);
		chooseLanguage = (LinearLayout) findViewById(R.id.fm_choose_language);
	}

	private void setOnClick() {
		recordSound.setOnCheckedChangeListener(this);
		yaHangJiePing.setOnCheckedChangeListener(this);
		showFloatView.setOnCheckedChangeListener(this);
		showTouch.setOnCheckedChangeListener(this);
		frontCamera.setOnCheckedChangeListener(this);
		gotoVideoManage.setOnCheckedChangeListener(this);
		showGameList.setOnCheckedChangeListener(this);

		// 消息推送checkbox监听
		PushNotification.setOnCheckedChangeListener(this);

		qualityOfVideo.setOnClickListener(this);
		openfloat.setOnClickListener(this);
		aboutus.setOnClickListener(this);
		checkUpdate.setOnClickListener(this);
		inviteFriend.setOnClickListener(this);
		help.setOnClickListener(this);
		chooseLanguage.setOnClickListener(this);

	}

	/**
	 * 初始化各个控件显示的值
	 */
	private void initData() {
		// 判断手机操作系统
		manufacturer = openFloatView.getManufacturer(mContext);
		// 如果是miui系统或者华为系统，显示悬浮窗选项
		if (manufacturer.equals("MIUI") || manufacturer.equals("HUAWEI")) {
			openfloat.setVisibility(View.VISIBLE);
			openflaotView.setVisibility(View.VISIBLE);
		} else {
			openfloat.setVisibility(View.GONE);
			openflaotView.setVisibility(View.GONE);
		}
		// 录制声音
		boolean recoudsound = sharedPreferences
				.getBoolean("record_sound", true);
		recordSound.setChecked(recoudsound);
		// 摇晃录屏
		boolean yahuan = sharedPreferences.getBoolean("yahangjieping", false);
		yaHangJiePing.setChecked(yahuan);
		// 显示浮窗
		boolean showfloat = sharedPreferences.getBoolean(
				"no_float_view_record", false);
		showFloatView.setChecked(showfloat);
		// 触摸位置
		boolean showtouch = sharedPreferences.getBoolean("show_touch_view",
				false);
		showTouch.setChecked(showtouch);
		// 前摄像头
		boolean showcamera = sharedPreferences.getBoolean("show_front_camera",
				false);
		frontCamera.setChecked(showcamera);
		// 扫描游戏列表
		boolean showgamelist = sharedPreferences.getBoolean(
				"PackageInfoGridviewNotify", false);
		showGameList.setChecked(showgamelist);

		// 跳转到视频管理
		boolean showvideomanage = sharedPreferences.getBoolean(
				"isGotoVideoManage", true);
		gotoVideoManage.setChecked(showvideomanage);

		// 清晰度
		String quality = "";
		if (MainActivity.SDKVesion >= 19) {
			quality = sharedPreferences.getString("quality_of_video", "0");
		} else {

			quality = sharedPreferences.getString("quality_of_video", "1");
		}
		// 将2.0.1.1及之前版本的清晰度修改成最新版本
		if (quality.equals("高清")) {
			quality = "0";
			sharedPreferences.edit()
					.putString("quality_of_video", ExApplication.HQuality)
					.commit();
		} else if (quality.equals("标准")) {
			quality = "1";
			sharedPreferences.edit()
					.putString("quality_of_video", ExApplication.HQuality)
					.commit();
		} else if (quality.equals("流畅")) {
			sharedPreferences.edit()
					.putString("quality_of_video", ExApplication.HQuality)
					.commit();
			quality = "0";
		}

		if (quality.equals("0")) {
			qualityTextview.setText(ExApplication.HQualityVaule);
		} else if (quality.equals("1")) {
			qualityTextview.setText(ExApplication.SQualityVaule);
		} else if (quality.equals("2")) {
			qualityTextview.setText(ExApplication.SHQualityVaule);
		}

		// 检测是否存在新版本
		new GetNewVersionTask().execute();

		// 获取到消息推送勾选框的布尔值
		boolean mboolean = sharedPreferences.getBoolean("isPushNotification",
				false);
		// 根据布尔值设置勾选框状态
		if (mboolean == true) {
			PushNotification.setChecked(true);

		} else {
			PushNotification.setChecked(false);

		}

	}

	private void startService() {
		// UtilService.startService(SettingActivity.this);
		mContext.startService(new Intent(mContext, ScreenRECService.class));
	}

	private void endYaohuangjiepingService() {
		startService();
		Intent intent = new Intent(RecordAction.ACTION);
		intent.putExtra("action", "end_yaohuangjieping_service");
		sendBroadcast(intent);
	}

	private void startYaohuangjiepingService() {
		startService();
		Intent intent = new Intent(RecordAction.ACTION);
		intent.putExtra("action", "start_yaohuangjieping_service");
		sendBroadcast(intent);
	}

	// 显示通知栏
	private void showScreenshotNotification() {
		if (!isShowNotify) {
			isShowNotify = true;
			startService();
			Intent intent = new Intent(RecordAction.ACTION);
			intent.putExtra("action", "show_screenshot_notification");
			sendBroadcast(intent);
		}
	}

	@Override
	protected void onDestroy() {
		super.onDestroy();
		last2 = null;
		unregisterReceiver(receiver);
	}

	@Override
	protected void onNewIntent(Intent intent) {
		super.onNewIntent(intent);
		if (intent.getBooleanExtra("hideStatusPanel", false)) {
			ViewUtils.hideStatusPanel(this);
		}
	}

	@Override
	protected void onResume() {
		super.onResume();
		if (isFirstResume) {
			isFirstResume = false;
			// onCreateActivity();
		}
		SharedPreferences sp = SharedPreferencesUtils
				.getMinJieKaiFaPreferences(this);

	}

	class HomeKeyEventBroadCastReceiver extends BroadcastReceiver {

		static final String SYSTEM_REASON = "reason";
		static final String SYSTEM_HOME_KEY = "homekey";// home key
		static final String SYSTEM_RECENT_APPS = "recentapps";// long home key

		@Override
		public void onReceive(Context context, Intent intent) {
			String action = intent.getAction();
			if (action.equals(Intent.ACTION_CLOSE_SYSTEM_DIALOGS)) {
				String reason = intent.getStringExtra(SYSTEM_REASON);
				if (reason != null) {
					if (reason.equals(SYSTEM_HOME_KEY)) {
						VideoApplicationActivity.this.finish();
					} else if (reason.equals(SYSTEM_RECENT_APPS)) {
					}
				}
			}
		}
	}

	public String getString(String name) {
		return RUtils.getRString(name);
	}

	@Override
	public boolean onKeyDown(int keyCode, KeyEvent event) {
		if (keyCode == KeyEvent.KEYCODE_HOME) {
			if (!RecordVideo.isRecordering && MainActivity.last == null) {

				MainActivity.isInMain = false;
			}
		}
		if (keyCode == KeyEvent.KEYCODE_BACK) {
			// 双击退出应用
			MainActivity.handler.sendEmptyMessage(11);
			if (!RecordVideo.isRecordering && MainActivity.last == null) {

				MainActivity.isInMain = false;
			}
			return true;
		}
		return super.onKeyDown(keyCode, event);
	}

	public void onClick(View v) {

		if (v == qualityOfVideo) { // 清晰度选择监听
			dialogQualityOfVideo();

		} else if (v == checkUpdate) {// 检查更新
			MinUtil.upUmenEventValue(mContext, "检查更新点击次数", "fmSettingPageCount");
			if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB) {

				new UpdateTask(last2, 0)
						.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR);
			} else {
				new UpdateTask(last2, 0).execute();
			}
		} else if (v == aboutus) {// 关于我们
			MinUtil.upUmenEventValue(mContext, "关于我们点击次数", "fmSettingPageCount");
			Intent intent = new Intent(this, AboutUs.class);
			startActivity(intent);
		} else if (v == inviteFriend) {// 分享给好友

			Intent intent = new Intent(this, ShareButtonActivity.class);
			String shareUrl = SRUrl;
			// 分享地址
			intent.putExtra("videoUrl", shareUrl);
			// 分享标题
			intent.putExtra("VideoTitle", RUtils.getRString(R.string.app_name));
			// 分享图标
			intent.putExtra("imageUrl", iconUrl);
			// 分享内容
			intent.putExtra("content",
					RUtils.getRString(R.string.share_content_of_app));
			// 告知ShareButtonActivity来自哪个activity的调用
			intent.putExtra("activity", "SettingActivity");

			MinUtil.upUmenEventValue(mContext, "邀请好友次数", "fmSettingPageCount");
			startActivity(intent);

		} else if (v == openfloat) {// 开启悬浮窗
			MinUtil.upUmenEventValue(mContext, "手动打开悬浮窗次数",
					"fmSettingPageCount");
			if (manufacturer.equals("MIUI")) {
				openFloatView.showInstalledAppDetails(mContext,
						getPackageName());
			} else if (manufacturer.equals("HUAWEI")) {

				Intent intent = new Intent();
				intent.setAction("android.intent.action.MAIN");
				try {

					intent.setClassName("com.huawei.systemmanager",
							"com.huawei.systemmanager.SystemManagerMainActivity");
					startActivity(intent);
				} catch (Exception e) {
					try {
						intent.setClassName("com.huawei.systemmanager",
								"com.huawei.systemmanager.mainscreen.MainScreenActivity");
						startActivity(intent);
					} catch (Exception ee) {
						MinUtil.showToast(mContext,
								RUtils.getRString(R.string.manual_operation));
					}
				}

			}
		} else if (v == help) {
			MinUtil.upUmenEventValue(mContext, "帮助与教程点击次数",
					"fmSettingPageCount");
			Intent intent = new Intent();
			intent.setClass(this, UseHelpActivity.class);
			startActivity(intent);
		} else if (v == chooseLanguage) {
			Intent intent = new Intent();
			intent.setClass(this, LanguageChooseActivity.class);
			startActivity(intent);
		}
	}

	public void exitProgrames() {
		Intent startMain = new Intent(Intent.ACTION_MAIN);
		startMain.addCategory(Intent.CATEGORY_HOME);
		startMain.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
		startActivity(startMain);
		android.os.Process.killProcess(android.os.Process.myPid());
	}

	public boolean runInBack() {
		PackageManager pm = getPackageManager();
		ResolveInfo homeInfo = pm.resolveActivity(
				new Intent(Intent.ACTION_MAIN)
						.addCategory(Intent.CATEGORY_HOME), 0);
		ActivityInfo ai = homeInfo.activityInfo;
		Intent startIntent = new Intent(Intent.ACTION_MAIN);
		startIntent.addCategory(Intent.CATEGORY_LAUNCHER);
		startIntent.setComponent(new ComponentName(ai.packageName, ai.name));
		startActivitySafely(startIntent);
		return true;
	}

	private void startActivitySafely(Intent intent) {
		intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
		try {
			startActivity(intent);
		} catch (ActivityNotFoundException e) {
			Toast.makeText(this, "null", Toast.LENGTH_SHORT).show();
		} catch (SecurityException e) {
			Toast.makeText(this, "null", Toast.LENGTH_SHORT).show();
		}
	}

	@Override
	public void onPause() {
		super.onPause();
		MobclickAgent.onPause(this);

	}

	/**
	 * 如果检测到新版本，linearlayout显示新版本提示
	 * 
	 * @author WYX
	 * 
	 */

	private class GetNewVersionTask extends AsyncTask<Void, Void, String> {
		@Override
		protected String doInBackground(Void... voids) {
			// 获取新版本信息
			update = new UpdateTask(last2, 0).getUpdate(mContext);
			// 如果能获取到新版本信息
			if (update != null) {

				return "s";
			}
			return "";
		}

		@SuppressLint("ShowToast")
		@Override
		protected void onPostExecute(String s) {
			super.onPostExecute(s);

			if (s.equals("s")) {
				if ("U".equals(update.getUpdate_flag())) {// 有新版本，当前版本还能用

					VersionLinear.setVisibility(View.GONE);
					// 显示版本提示红点
					newVersion.setVisibility(View.VISIBLE);
				} else if ("A".equals(update.getUpdate_flag())) {// 当前版本无法使用，必须更新

					VersionLinear.setVisibility(View.GONE);
					// 显示版本提示红点
					newVersion.setVisibility(View.VISIBLE);
				} else {// 已是最新版本

					// 显示已是最新版本
					VersionLinear.setVisibility(View.VISIBLE);
					// 不显示版本提示红点
					newVersion.setVisibility(View.GONE);
				}
			} else {// 已是最新版本

				// 显示已是最新版本
				VersionLinear.setVisibility(View.VISIBLE);
				// 不显示版本提示红点
				newVersion.setVisibility(View.GONE);
			}
		}
	}

	/**
	 * 勾选框监听事件
	 */
	public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) {

		if (buttonView == recordSound) {// 声音选项
			if (isChecked) {//
				sharedPreferences.edit().putBoolean("record_sound", true)
						.commit();
				MinUtil.upUmenEventValue(mContext, "开启声音录制次数",
						"fmSettingPageCount");

			} else {
				sharedPreferences.edit().putBoolean("record_sound", false)
						.commit();
				MinUtil.upUmenEventValue(mContext, "关闭声音录制次数",
						"fmSettingPageCount");
			}
			// 写入XML配置文件
			xmlFileWriter.creat(mContext);
		} else if (buttonView == yaHangJiePing) {
			if (isChecked) {// 摇晃截屏
				startYaohuangjiepingService();
				sharedPreferences.edit().putBoolean("yahangjieping", true)
						.commit();
				MinUtil.upUmenEventValue(mContext, "开启摇晃录屏次数",
						"fmSettingPageCount");
			} else {
				endYaohuangjiepingService();
				sharedPreferences.edit().putBoolean("yahangjieping", false)
						.commit();
				MinUtil.upUmenEventValue(mContext, "关闭摇晃录屏次数",
						"fmSettingPageCount");
			}
			// 写入XML配置文件
			xmlFileWriter.creat(mContext);
		} else if (buttonView == showFloatView) {
			if (RecordVideo.isRecordering) {// 录屏时不允许修改状态
				MinUtil.showToast(mContext,
						RUtils.getRString(R.string.recording_cant_modification));
				showFloatView.setChecked(!isChecked);
			} else {
				if (isChecked) {// 显示悬浮框
					sharedPreferences.edit()
							.putBoolean("no_float_view_record", true).commit();
					MinUtil.upUmenEventValue(mContext, "开启无悬浮窗录制次数",
							"fmSettingPageCount");

				} else {
					sharedPreferences.edit()
							.putBoolean("no_float_view_record", false).commit();
					MinUtil.upUmenEventValue(mContext, "关闭无悬浮窗录制次数",
							"fmSettingPageCount");
				}
				// 写入XML配置文件
				xmlFileWriter.creat(mContext);
			}
		} else if (buttonView == PushNotification) {// 推送选项

			// 根据checkbox勾选状态设定isPushNotification的布尔值
			if (isChecked == true) {
				sharedPreferences.edit().putBoolean("isPushNotification", true)
						.commit();
				//
				// // 随机参数一个86400000到86400000*3(一到三天)之间的随机数
				// int minTime = 86400000;
				// int maxTime = 86400000 * 2;
				// Random rand = new Random();
				// int randNum = rand.nextInt(maxTime) + minTime;
				// long systemTime = System.currentTimeMillis();
				// // 将推送时间加上系统时间，作为系统闹铃启动的绝对时间
				// sharedPreferences.edit().putLong("PushTime",
				// randNum + systemTime);
				// sharedPreferences.edit().commit();

				// 开启闹铃
				// setAlarmTime(this, randNum);
				MinUtil.upUmenEventValue(mContext, "接收推送", "fmPush");
			} else {
				sharedPreferences.edit()
						.putBoolean("isPushNotification", false).commit();

			}
			// 写入XML配置文件
			xmlFileWriter.creat(mContext);
		} else if (buttonView == showTouch) {// 触摸选项
			if (isChecked == true) {
				sharedPreferences.edit().putBoolean("show_touch_view", true)
						.commit();
				MinUtil.upUmenEventValue(mContext, "开启显示触摸位置次数",
						"fmSettingPageCount");
			} else {
				sharedPreferences.edit().putBoolean("show_touch_view", false)
						.commit();
				MinUtil.upUmenEventValue(mContext, "关闭显示触摸位置次数",
						"fmSettingPageCount");
			}
			// 写入XML配置文件
			xmlFileWriter.creat(mContext);
		} else if (buttonView == frontCamera) {// 前摄像头选项
			if (isChecked == true) {
				sharedPreferences.edit().putBoolean("show_front_camera", true)
						.commit();
				MinUtil.upUmenEventValue(mContext, "开启前置摄像头次数",
						"fmSettingPageCount");

			} else {
				sharedPreferences.edit().putBoolean("show_front_camera", false)
						.commit();
				MinUtil.upUmenEventValue(mContext, "关闭前置摄像头次数",
						"fmSettingPageCount");
			}
			// 写入XML配置文件
			xmlFileWriter.creat(mContext);
		} else if (buttonView == showGameList) {// 游戏列表框
			if (isChecked == true) {
				sharedPreferences.edit()
						.putBoolean("PackageInfoGridviewNotify", true).commit();
				MinUtil.upUmenEventValue(mContext, "开启游戏扫描次数",
						"fmSettingPageCount");
			} else {
				sharedPreferences.edit()
						.putBoolean("PackageInfoGridviewNotify", false)
						.commit();
				MinUtil.upUmenEventValue(mContext, "关闭游戏扫描次数",
						"fmSettingPageCount");
			}

			// 写入XML配置文件
			xmlFileWriter.creat(mContext);
		} else if (buttonView == gotoVideoManage) {
			if (isChecked == true) {
				sharedPreferences.edit().putBoolean("isGotoVideoManage", true)
						.commit();
				MinUtil.upUmenEventValue(mContext, "开启录屏后跳转视频管理页次数",
						"fmSettingPageCount");

			} else {
				sharedPreferences.edit().putBoolean("isGotoVideoManage", false)
						.commit();
				MinUtil.upUmenEventValue(mContext, "关闭录屏后跳转视频管理页次数",
						"fmSettingPageCount");

			}
		}
	}

	/**
	 * 闹钟，用以定时启动推送
	 * 
	 * @param context
	 * @param pushTime
	 *            闹铃间隔时间
	 */
	public static void setAlarmTime(Context context, int pushTime) {

		alarmManager = (AlarmManager) context
				.getSystemService(Context.ALARM_SERVICE);

		Intent intent = new Intent("android.alarm.push.action");

		sender = PendingIntent.getBroadcast(

		context, 0, intent, PendingIntent.FLAG_CANCEL_CURRENT);

		// 1500毫秒后执行，闹铃间隔时间为pushTime
		alarmManager.setRepeating(AlarmManager.RTC_WAKEUP, 1500, pushTime,
				sender);

	}

	/**
	 * 清晰度选择对话框
	 */
	public void dialogQualityOfVideo() {
		final String[] array = new String[] {ExApplication.SQualityVaule ,
				ExApplication.HQualityVaule,
				ExApplication.SHQualityVaule };
		String quality_select = RUtils.getRString(R.string.quality_select)
				.toString();
		Dialog alertDialog = new AlertDialog.Builder(this)
				.setTitle(quality_select)

				.setItems(array, new DialogInterface.OnClickListener() {

					@Override
					public void onClick(DialogInterface dialog, int which) {
						switch (which) {
						case 0:
							sharedPreferences
									.edit()
									.putString("quality_of_video",
											ExApplication.SQuality).commit();
							qualityTextview.setText(array[which]);
							// 写入XML配置文件
							// xmlFileWriter.creat(mContext);
							break;
						case 1:
							sharedPreferences
									.edit()
									.putString("quality_of_video",
											ExApplication.HQuality).commit();
							qualityTextview.setText(array[which]);
							// 写入XML配置文件
							// xmlFileWriter.creat(mContext);
							break;
						case 2:
							dialogQualityHint();
							break;

						}
					}
				})
				.setNegativeButton(
						RUtils.getRString(R.string.fm_screenshot_cancel),
						new DialogInterface.OnClickListener() {

							@Override
							public void onClick(DialogInterface dialog,
									int which) {

							}
						}).create();
		alertDialog.show();
	}

	public void dialogQualityHint() {
		String content = RUtils.getRString(R.string.sh_quality_hint);
		String title = RUtils.getRString(R.string.fm_tip);
		final String suer = RUtils.getRString(R.string.fm_sure);
		String cancle = RUtils.getRString(R.string.fm_screenshot_cancel);
		new AlertDialog.Builder(mContext).setTitle(title).setMessage(content)

		.setPositiveButton(suer, new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int which) {
				sharedPreferences.edit().putString("quality_of_video", ExApplication.SHQuality)
						.commit();
				qualityTextview.setText(ExApplication.SHQualityVaule);
			}
		}).setNegativeButton(cancle, new DialogInterface.OnClickListener() {
			public void onClick(DialogInterface dialog, int which) {

			}
		}).show();
	}

}